# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from azure.core.rest import AsyncHttpResponse, HttpRequest

from .._serialization import Deserializer, Serializer
from ..models import _models as models
from ._configuration import EasmClientConfiguration
from .operations import (
    AssetsOperations,
    DataConnectionsOperations,
    DiscoGroupsOperations,
    DiscoTemplatesOperations,
    ReportsOperations,
    SavedFiltersOperations,
    TasksOperations,
    WorkspacesOperations,
)

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential


class EasmClient:  # pylint: disable=client-accepts-api-version-keyword,too-many-instance-attributes
    """EASM discovers and maps your digital attack surface to provide an "outside-in" perspective
    using probes to discover assets. The assets are provided with detailed metadata associated,
    including vulnerabilities, configurations and web components, allowing customers to view and
    prioritize external risk. The EASM REST API enables you to develop clients that integrate with
    your application.

    :ivar workspaces: WorkspacesOperations operations
    :vartype workspaces: azure.easm.aio.operations.WorkspacesOperations
    :ivar assets: AssetsOperations operations
    :vartype assets: azure.easm.aio.operations.AssetsOperations
    :ivar data_connections: DataConnectionsOperations operations
    :vartype data_connections: azure.easm.aio.operations.DataConnectionsOperations
    :ivar disco_groups: DiscoGroupsOperations operations
    :vartype disco_groups: azure.easm.aio.operations.DiscoGroupsOperations
    :ivar disco_templates: DiscoTemplatesOperations operations
    :vartype disco_templates: azure.easm.aio.operations.DiscoTemplatesOperations
    :ivar reports: ReportsOperations operations
    :vartype reports: azure.easm.aio.operations.ReportsOperations
    :ivar saved_filters: SavedFiltersOperations operations
    :vartype saved_filters: azure.easm.aio.operations.SavedFiltersOperations
    :ivar tasks: TasksOperations operations
    :vartype tasks: azure.easm.aio.operations.TasksOperations
    :param subscription_id: The ID of the target subscription. Required.
    :type subscription_id: str
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param region: The region hosting the requested resource. Default value is "api".
    :type region: str
    :keyword api_version: Api Version. Default value is "2022-09-01-preview". Note that overriding
     this default value may result in unsupported behavior.
    :paramtype api_version: str
    """

    def __init__(
        self, subscription_id: str, credential: "AsyncTokenCredential", region: str = "api", **kwargs: Any
    ) -> None:
        _endpoint = "https://{region}.easm.defender.microsoft.com"
        self._config = EasmClientConfiguration(
            subscription_id=subscription_id, credential=credential, region=region, **kwargs
        )
        self._client = AsyncPipelineClient(base_url=_endpoint, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.workspaces = WorkspacesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.assets = AssetsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.data_connections = DataConnectionsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.disco_groups = DiscoGroupsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.disco_templates = DiscoTemplatesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.reports = ReportsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.saved_filters = SavedFiltersOperations(self._client, self._config, self._serialize, self._deserialize)
        self.tasks = TasksOperations(self._client, self._config, self._serialize, self._deserialize)

    def send_request(self, request: HttpRequest, **kwargs: Any) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        path_format_arguments = {
            "region": self._serialize.url("self._config.region", self._config.region, "str"),
        }

        request_copy.url = self._client.format_url(request_copy.url, **path_format_arguments)
        return self._client.send_request(request_copy, **kwargs)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "EasmClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
